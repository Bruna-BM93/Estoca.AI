

quasFORMAT: 1A
HOST: https://v4.egestor.com.br/api/v1/

URL homologação/produção (access_token): https://api.egestor.com.br/api/oauth/access_token

# eGestor API

O [eGestor](https://www.egestor.com.br) disponibiliza uma API RESTful que permite o acesso aos módulos do sistema.

Recursos disponíveis para acesso via API:
* [**Dados da empresa**](#reference/recursos/empresa)
* [**Contatos**](#reference/recursos/contatos)
* [**Categoria de produtos**](#reference/recursos/categorias)
* [**Produtos**](#reference/recursos/produtos)
* [**Ajuste de estoque**](#reference/recursos/ajuste-de-estoque)
* [**Serviços**](#reference/recursos/servicos)
* [**Disponíveis**](#reference/recursos/disponiveis)
* [**Formas de pagamento**](#reference/recursos/formas-de-pagamento)
* [**Plano de contas**](#reference/recursos/plano-de-contas)
* [**Grupo de tributos**](#reference/recursos/grupo-de-tributos)
* [**Recebimentos**](#reference/recursos/recebimentos)
* [**Pagamentos**](#reference/recursos/pagamentos)
* [**Compras**](#reference/recursos/compras)
* [**Vendas / Ordens de serviço / OS**](#reference/recursos/vendas-ordens-de-servico-os)
* [**Devolução de vendas**](#reference/recursos/devolucoes)
* [**Boletos**](#reference/recursos/boletos)
* [**Relatórios**](#reference/recursos/relatorios)
* [**NFSe**](#reference/recursos/nfse)
* [**NFe**](#reference/recursos/nfe)
* [**Disco virtual**](#reference/recursos/disco-virtual)
* [**Usuários**](#reference/recursos/usuarios)
* [**Webhooks**](#reference/recursos/webhooks)

## Métodos
Requisições para a API devem seguir os padrões:
| Método | Descrição |
|---|---|
| `GET` | Retorna informações de um ou mais registros. |

## Respostas

| Código | Descrição |
|---|---|
| `200` | Requisição executada com sucesso (success).|
| `400` | Erros de validação ou os campos informados não existem no sistema.|
| `401` | Dados de acesso inválidos.|
| `404` | Registro pesquisado não encontrado (Not found).|
| `405` | Método não implementado.|
| `410` | Registro pesquisado foi apagado do sistema e não esta mais disponível.|
| `422` | Dados informados estão fora do escopo definido para o campo.|
| `429` | Número máximo de requisições atingido. (*aguarde alguns segundos e tente novamente*)|


## Limites (Throttling)
Existe o limite de `60` requisições por minuto por aplicação+usuário.

Você pode acompanhar esses limites nos `headers`: `X-RateLimit-Limit`, `X-RateLimit-Remaining` enviados em todas as respostas da API.

Ações de `listar` exibem `50` registros por página. Não é possível alterar este número.

Por questões de segurança, todas as requisições serão feitas através do protocolo `HTTPS`.

## Listar
As ações de `listar` permitem o envio dos seguintes parâmetros:

| Parâmetro | Descrição |
|---|---|
| `filtro` | Filtra dados pelo valor informado. |
| `page` | Informa qual página deve ser retornada. |


# Group Autenticação - OAuth

Nossa API utiliza [OAuth2](https://oauth.net/2/) como forma de autenticação/autorização.


## Solicitando tokens de acesso [/oauth/access_token]

Para testar a API, crie uma conta no eGestor e entre no sistema utilizando as credenciais informadas.  
Para gerar o token da API (personal_token)

### Obtendo o personal_token

Para testar a API do eGestor (sandbox), sugerimos a criação de uma conta de testes.

Para obter o personal_token, siga as instruções do video a seguir: https://www.youtube.com/watch?v=2y648YPA9Us&authuser=1

### Utilizando personal_token [POST]
**Atenção! O endpoint de login não utiliza o parâmetro da versão da API (v1). Utilize a seguinte URL:**

> POST https://api.egestor.com.br/api/oauth/access_token

O `personal_token` é do formato JWT e contém informações da empresa (subdomínio) e do usuário. Este é o token utilizado em sistemas de e-Commerce e sites integrados ao eGestor.


#### Dados para envio no POST
| Parâmetro | Descrição |
|---|---|
| `grant_type` | Informar: `personal` |
| `personal_token` | Token JWT com informações da aplicação cliente. |


+ Request (application/json)

    + Body

            {
              "grant_type": "personal"
              "personal_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHAiOiIzNDhlNTM4MzQ2M2Y3MzZjMGExZTJhNTFmNjYwZjA5NCIsInN1YmRvbWluaW8iOiJleGVtcGxvIiwiY2xpZW50IjoiMTU0ZDZlZGQ4YmQzMDEwYzQ4NjBkN2E5Yzk1NzNmYmVmZTUyNGRlZiJ9.JJNs0bFtGOtwyJy_r-eefsvkd387M_x7zpucE1m4WIw",
            }

+ Response 200 (application/json)

    + Body

            {
                "access_token": "[access_token]",
                "token_type": "Bearer",
                "expires_in": 900,
                "refresh_token": "[refresh_token]"
            }




# Serviços [/servicos]


### Listar (List) [GET /servicos{?filtro,fields,orderBy}]
+ Parameters
    + filtro (optional) - Busca a string informada nos campos código e descrição do serviço.
    + fields (optional) - Permite definir quais os campos serão retornados pela api. Informe separado por vírgula.
      * ex: &fields=codigo,descricao
    + orderBy (optional) - Permite definir a ordenação da listagem. Informe o campo e a forma de ordenação (ascendente ou descendente) separados por vírgula. Só é possível definir uma ordenação por requisição. Valores possíveis:
        * codigo, codCategoria, descricao, precoVenda, dtCad
        * ex: &orderBy=descricao,desc
        * ex: &orderBy=precoVenda,asc

+ Request (application/json)

  + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)

            {
                "total": 1,
                "per_page": 50,
                "current_page": 1,
                "last_page": 1,
                "next_page_url": null,
                "prev_page_url": null,
                "from": 1,
                "to": 50,
                "data": [
                    {
                        "codigo": 3,
                        "descricao": "",
                        "precoVenda": 0,
                        "codigoGrupoTributos": 0,
                        "tags": [],
                        "dtCad": "2017-04-24 11:44:35",
                        "itemListaServico": "",
                        "cnae": ""
                    }
                ]
            }

### Detalhar (Read) [GET /servicos/{codigo}]

+ Request (application/json)

  + Headers

            Authorization: Bearer [access_token]

  + Parameters
      + codigo (required, number, `1`) ... Código do serviço

+ Response 200 (application/json)

    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 58

    + Body

            {
              "codigo": 10,
              "descricao": "Manuteção agendada",
              "precoVenda": 10,
              "codigoGrupoTributos": 1,
              "anotacoesInternas": "",
              "dtCad": "2017-04-24 11:44:35",
              "tipoProduto": "servico",
              "tags": [],
              "itemListaServico": "14.01",
              "cnae": "1234567",
              "codTributacaoMun": "987654"
            }

+ Response 410 (application/json)
 Quando o registro foi apagado do sistema.

    + Body

            {
              "errCode": 410,
              "errMsg": "Registro com código 1 não existe.",
              "errObs": null,
              "errFields": null
            }

+ Response 404 (application/json)
 Quando o registro não foi encontrado.

    + Body

            {
              "errCode": 404,
              "errMsg": "Nenhum registro com código 1 econtrado",
              "errObs": null,
              "errFields": null
            }
# Disponiveis [/disponiveis]

Configuração das contas caixa da empresa.


### Listar (List) [GET /disponiveis{?fields,orderBy}]
+ Parameters
    + fields (optional) - Permite definir quais os campos serão retornados pela api. Informe separado por vírgula. Valores possíveis:
        * codigo, nome, saldo, visivel
        * ex: &fields=nome,saldo
        * Padrão: codigo, nome, saldo, visivel
    + orderBy (optional) - Permite definir a ordenação da listagem. Informe o campo e a forma de ordenação (ascendente ou descendente) separados por vírgula. Só é possível definir uma ordenação por requisição. Valores possíveis:
        * codigo, nome, saldo, visivel
        * ex: &orderBy=nome,asc
        * ex: &orderBy=saldo,desc

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)

          {
              "total": 1,
              "per_page": 50,
              "current_page": 1,
              "last_page": 4,
              "next_page_url": null,
              "prev_page_url": null,
              "from": 1,
              "to": 50,
              "data": [
                {
                  "codigo": 1,
                  "nome": "Caixa Interno",
                  "saldo": 15.5,
                  "visivel": true
                }
              ]
          }

+ Response 401 (application/json)

          {
              "errCode": 401,
              "errMsg": "Não foi possível acessar o sistema. Verifique seu \"access_token\".",
              "errObs": "access_denied",
              "errFields": null,
              "errUrl": "/v1/disponiveis"
          }
### Detalhar (Read) [GET /disponiveis/{codigo}]

+ Parameters
    + codigo (required, number, `1`) ... Código do disponivel

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)
  Todos os dados do disponivel
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 58

    + Body

            {
              "codigo": 1,
              "nome": "CEF",
              "saldo": 5000.35,
              "visivel": true
            }

+ Response 404 (application/json)
  Quando registro não for encontrado.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59

    + Body

            {
              "errCode": 404,
              "errMsg": "Nenhum registro com código 1 econtrado",
              "errObs": null,
              "errFields": null
            }

+ Response 410 (application/json)
  Quando registro foi apagado do sistema, o código de retorno é 410.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59
    + Body

            {
              "errCode": 410,
              "errMsg": "Registro com código 1 não existe.",
              "errObs": null,
              "errFields": null
            }



# Plano de contas [/planoContas]

| tipo | Descrição |
|------|------------|
| `1` | Receita. |
| `2` | Despesa. |

Todo plano de conta precisa estar vinculado a um dos planos de conta padrão já existentes no sistema, identificados pelo atributo `registroPadrao` = true. O atributo `tipo` (receita ou despesa) é obtido automaticamente, de acordo com o registro pai. 


### Listar (List) [GET /planoContas{?fields,orderBy}]
+ Parameters
    + fields (optional) - Permite definir quais os campos serão retornados pela api. Informe separado por vírgula. Valores possíveis:
        * codigo, codPai, nome, tipo, debitar, creditar, registroPadrao
        * ex: &fields=nome,registroPadrao
        * Padrão: codigo, codPai, nome, tipo, debitar, creditar, registroPadrao
    + orderBy (optional) - Permite definir a ordenação da listagem. Informe o campo e a forma de ordenação (ascendente ou descendente) separados por vírgula. Só é possível definir uma ordenação por requisição. Valores possíveis:
        * codigo, codPai, nome, tipo, debitar, creditar, registroPadrao
        * ex: &orderBy=nome,asc
        * ex: &orderBy=codigo,desc

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)

          {
              "total": 1,
              "per_page": 50,
              "current_page": 1,
              "last_page": 4,
              "next_page_url": null,
              "prev_page_url": null,
              "from": 1,
              "to": 50,
              "data": [
                {
                  "codigo": 1,
                  "codPai": 0,
                  "nome": "Receitas diversas",
                  "tipo": 1,
                  "debitar": 0,
                  "creditar": 0,
                  "registroPadrao": true
                }
              ]
          }

+ Response 401 (application/json)

          {
              "errCode": 401,
              "errMsg": "Não foi possível acessar o sistema. Verifique seu \"access_token\".",
              "errObs": "access_denied",
              "errFields": null,
              "errUrl": "/v1/planoContas"
          }

### Detalhar (Read) [GET /planoContas/{codigo}]

+ Parameters
    + codigo (required, number, `99`) ... Código do plano de conta

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)
  Todos os dados do plano de conta
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 58

    + Body

            {
              "codigo": 99,
              "codPai": 1,
              "nome": "Venda de produtos",
              "tipo": 1,
              "debitar": 0,
              "creditar": 0,
              "registroPadrao": false
            }

+ Response 404 (application/json)
  Quando registro não for encontrado.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59

    + Body

            {
              "errCode": 404,
              "errMsg": "Nenhum registro com código 99 encontrado",
              "errObs": null,
              "errFields": null
            }

+ Response 410 (application/json)
  Quando registro foi apagado do sistema, o código de retorno é 410.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59
    + Body

            {
              "errCode": 410,
              "errMsg": "Registro com código 99 não existe.",
              "errObs": null,
              "errFields": null
            }
