quasFORMAT: 1A
HOST: https://v4.egestor.com.br/api/v1/

URL homologação/produção (access_token): https://api.egestor.com.br/api/oauth/access_token

# eGestor API

O [eGestor](https://www.egestor.com.br) disponibiliza uma API RESTful que permite o acesso aos módulos do sistema.

Recursos disponíveis para acesso via API:
* [**Dados da empresa**](#reference/recursos/empresa)
* [**Contatos**](#reference/recursos/contatos)
* [**Categoria de produtos**](#reference/recursos/categorias)
* [**Produtos**](#reference/recursos/produtos)
* [**Ajuste de estoque**](#reference/recursos/ajuste-de-estoque)
* [**Serviços**](#reference/recursos/servicos)
* [**Disponíveis**](#reference/recursos/disponiveis)
* [**Formas de pagamento**](#reference/recursos/formas-de-pagamento)
* [**Plano de contas**](#reference/recursos/plano-de-contas)
* [**Grupo de tributos**](#reference/recursos/grupo-de-tributos)
* [**Recebimentos**](#reference/recursos/recebimentos)
* [**Pagamentos**](#reference/recursos/pagamentos)
* [**Compras**](#reference/recursos/compras)
* [**Vendas / Ordens de serviço / OS**](#reference/recursos/vendas-ordens-de-servico-os)
* [**Devolução de vendas**](#reference/recursos/devolucoes)
* [**Boletos**](#reference/recursos/boletos)
* [**Relatórios**](#reference/recursos/relatorios)
* [**NFSe**](#reference/recursos/nfse)
* [**NFe**](#reference/recursos/nfe)
* [**Disco virtual**](#reference/recursos/disco-virtual)
* [**Usuários**](#reference/recursos/usuarios)
* [**Webhooks**](#reference/recursos/webhooks)

## Métodos
Requisições para a API devem seguir os padrões:
| Método | Descrição |
|---|---|
| `GET` | Retorna informações de um ou mais registros. |

## Respostas

| Código | Descrição |
|---|---|
| `200` | Requisição executada com sucesso (success).|
| `400` | Erros de validação ou os campos informados não existem no sistema.|
| `401` | Dados de acesso inválidos.|
| `404` | Registro pesquisado não encontrado (Not found).|
| `405` | Método não implementado.|
| `410` | Registro pesquisado foi apagado do sistema e não esta mais disponível.|
| `422` | Dados informados estão fora do escopo definido para o campo.|
| `429` | Número máximo de requisições atingido. (*aguarde alguns segundos e tente novamente*)|


## Limites (Throttling)
Existe o limite de `60` requisições por minuto por aplicação+usuário.

Você pode acompanhar esses limites nos `headers`: `X-RateLimit-Limit`, `X-RateLimit-Remaining` enviados em todas as respostas da API.

Ações de `listar` exibem `50` registros por página. Não é possível alterar este número.

Por questões de segurança, todas as requisições serão feitas através do protocolo `HTTPS`.

## Listar
As ações de `listar` permitem o envio dos seguintes parâmetros:

| Parâmetro | Descrição |
|---|---|
| `filtro` | Filtra dados pelo valor informado. |
| `page` | Informa qual página deve ser retornada. |


# Group Autenticação - OAuth

Nossa API utiliza [OAuth2](https://oauth.net/2/) como forma de autenticação/autorização.


## Solicitando tokens de acesso [/oauth/access_token]

Para testar a API, crie uma conta no eGestor e entre no sistema utilizando as credenciais informadas.  
Para gerar o token da API (personal_token)

### Obtendo o personal_token

Para testar a API do eGestor (sandbox), sugerimos a criação de uma conta de testes.

Para obter o personal_token, siga as instruções do video a seguir: https://www.youtube.com/watch?v=2y648YPA9Us&authuser=1

### Utilizando personal_token [POST]
**Atenção! O endpoint de login não utiliza o parâmetro da versão da API (v1). Utilize a seguinte URL:**

> POST https://api.egestor.com.br/api/oauth/access_token

O `personal_token` é do formato JWT e contém informações da empresa (subdomínio) e do usuário. Este é o token utilizado em sistemas de e-Commerce e sites integrados ao eGestor.


#### Dados para envio no POST
| Parâmetro | Descrição |
|---|---|
| `grant_type` | Informar: `personal` |
| `personal_token` | Token JWT com informações da aplicação cliente. |


+ Request (application/json)

    + Body

            {
              "grant_type": "personal"
              "personal_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHAiOiIzNDhlNTM4MzQ2M2Y3MzZjMGExZTJhNTFmNjYwZjA5NCIsInN1YmRvbWluaW8iOiJleGVtcGxvIiwiY2xpZW50IjoiMTU0ZDZlZGQ4YmQzMDEwYzQ4NjBkN2E5Yzk1NzNmYmVmZTUyNGRlZiJ9.JJNs0bFtGOtwyJy_r-eefsvkd387M_x7zpucE1m4WIw",
            }

+ Response 200 (application/json)

    + Body

            {
                "access_token": "[access_token]",
                "token_type": "Bearer",
                "expires_in": 900,
                "refresh_token": "[refresh_token]"
            }




# Categorias de produtos [/categorias]

As categorias são utilizadas para agrupar produtos, podendo filtrar posteriormente por produtos de determinada categoria.


### Listar (List) [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)

          {
              "total": 1,
              "per_page": 50,
              "current_page": 1,
              "last_page": 1,
              "next_page_url": null,
              "prev_page_url": null,
              "from": 1,
              "to": 50,
              "data": [
                {
                  "codigo": "1",
                  "nome": "Material de escritório"
                }
              ]
          }

+ Response 401 (application/json)

          {
              "errCode": 401,
              "errMsg": "Não foi possível acessar o sistema. Verifique seu \"access_token\".",
              "errObs": "access_denied",
              "errFields": null,
              "errUrl": "/v1/categorias"
          }

### Detalhar (Read) [GET /categorias/{codigo}]

+ Parameters
    + codigo (required, number, `1`) ... Código da categoria

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)
  Todos os dados do categoria
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 58

    + Body

            {
              "codigo": "1",
              "nome": "Material de escritório"
            }

+ Response 404 (application/json)
  Quando registro não for encontrado.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59

    + Body

            {
              "errCode": 404,
              "errMsg": "Nenhum registro com código 1 encontrado",
              "errObs": null,
              "errFields": null
            }

+ Response 410 (application/json)
  Quando registro foi apagado do sistema, o código de retorno é 410.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59
    + Body

            {
              "errCode": 410,
              "errMsg": "Registro com código 1 não existe.",
              "errObs": null,
              "errFields": null
            }

# Produtos [/produtos]

Produtos são utilizados nas vendas e controle de estoque.


### Listar (List) [GET /produtos{?filtro,codCategoria,controlarEstoque,tipoUso,arquivado,anotInternas,Norig,INCM,codConfigTrib,IcProd,updatedBefore,updatedAfter,fields,orderBy}]

+ Parameters
    + filtro (optional) - Busca a string informada nos campos: código do produto, código próprio e nome do produto.
    + codCategoria (optional, integer) - Código da categoria do produto.
    + controlarEstoque (optional, integer) - Filtra por produtos que controlam/não controlam estoque. Valores possíveis:
      * 0 - Não controla estoque
      * 1 - Controla estoque
    + tipoUso (number, optional) - Tipo de uso do produto
        * 0 - Mercadoria para revenda
        * 1 - Matéria-prima
        * 2 - Embalagem
        * 3 - Produtos em processo
        * 4 - Produto final (Produção)
    + arquivado (boolean, optional) - Filtra apenas por produtos arquivados
    + Norig (optional, integer) - Origem do produto. Valores possíveis:
      * 0 - Nacional, exceto as indicadas nos códigos de 3, 4, 5 e 8',
      * 1 - Estrangeira, importação direta, exceto a indicada no código 6',
      * 2 - Estrangeira, adquirida no mercado interno, exceto a indicada no código 7',
      * 3 - Nacional, mercadoria ou bem com Conteúdo de Importação maior que 40% e menor ou igual a 70%',
      * 4 - Nacional, produção em conformidade com processos básicos que tratam as legisl. dos Ajustes',
      * 5 - Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%',
      * 6 - Estrangeira, importação direta, sem similar nacional, constante na lista da CAMEX e gás natural',
      * 7 - Estrangeira, adquir. merc. interno, sem similar nacional, na lista da CAMEX e gás natural',
      * 8 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%'
    + INCM (optional, integer) - NCM dos produtos
    + codConfigTrib (optional, integer) - Código do grupo de tributos vinculado.
    + IcProd (optional, string) - Código interno do produto
    + anotInternas (optional, string) - Filtro baseado nas observações internas do produto
    + updatedBefore (optional, string) - Lista apenas produtos que sofreram alterações antes da data informada. Formato "YYYY-MM-DD HH:MM:SS"
    + updatedAfter (optional, string) - Lista apenas produtos que sofreram alterações após a data informada. Formato "YYYY-MM-DD HH:MM:SS"
    + fields (optional) - Permite definir quais os campos serão retornados pela api. Informe separado por vírgula.
      * ex: &fields=descricao,codigoProprio
    + orderBy (optional) - Permite definir a ordenação da listagem. Informe o campo e a forma de ordenação (ascendente ou descendente) separados por vírgula. Só é possível definir uma ordenação por requisição. Valores possíveis:
        * codigo, codCategoria, descricao, codigoProprio, estoque, estoqueMinimo, controlarEstoque, margemLucro, precoCusto, precoVenda, origemFiscal, unidadeTributada, refEanGtin, ncm, excecaoIPI, codigoCEST, pesoBruto, pesoLiquido, anotacoesNFE, anotacoesInternas, tags, dtCad
        * ex: &orderBy=margemLucro,desc
        * ex: &orderBy=descricao,asc

+ Request (application/json)

  + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)

            {
                "total": 1,
                "per_page": 50,
                "current_page": 1,
                "last_page": 4,
                "next_page_url": null,
                "prev_page_url": null,
                "from": 1,
                "to": 50,
                "data": [
                    {
                        "codigo": 1,
                        "descricao": "Caneca Preta",
                        "codigoProprio": "",
                        "estoque": 60,
                        "estoqueMinimo": 10,
                        "controlarEstoque": false,
                        "margemLucro": 0,
                        "precoCusto": 100,
                        "precoVenda": 200,
                        "origemFiscal": 0,
                        "unidadeTributada": "UN",
                        "refEanGtin": "",
                        "ncm": "",
                        "excecaoIPI": 1,
                        "codigoCEST": "",
                        "pesoBruto": 0,
                        "pesoLiquido": 0,
                        "codigoGrupoTributos": 1,
                        "anotacoesNFE": "",
                        "anotacoesInternas": "",
                        "tags": [ "café", "utilidades" ],
                        "dtCad": "2017-03-10 14:10:37",
                        "codCategoria": 0,
                        "updatedAt": "2019-09-20 16:56:39",
                        "listaImagens": [
                            {
                                "foto": {
                                    "link": "https://730590973010370e1726.cdn.com/010-2154900.png",
                                    "padrao": 1
                                },
                                "thumb": {
                                    "link": "https://730590973010370e1726.cdn.com/010-2154900_tmb.png"
                                }
                            },
                            {
                                "foto": {
                                    "link": "https://730590973010370e1726.cdn.com/011-2111100.png"
                                },
                                "thumb": {
                                    "link": "https://730590973010370e1726.cdn.com/011-2111100_tmb.png"
                                }
                            }
                        ]
                    }
                ]
            }

### Detalhar (Read) [GET /produtos/{codigo}]

+ Request (application/json)

  + Headers

            Authorization: Bearer [access_token]

  + Parameters
      + codigo (required, number, `1`) ... Código do contato

+ Response 200 (application/json)

    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 58

    + Body

            {
              "codigo": "1",
              "descricao": "Novo produto",
              "codigoProprio": "",
              "codCategoria": 1,
              "estoque": 100,
              "estoqueMinimo": 0,
              "controlarEstoque": true,
              "margemLucro": 0.00,
              "precoCusto": 0.0000,
              "precoVenda": 0.0000,
              "origemFiscal": 0,
              "unidadeTributada": "UN",
              "refEanGtin": "",
              "ncm": "",
              "codigoCEST": "",
              "excecaoIPI": "",
              "codigoGrupoTributos": 0,
              "anotacoesNFE": "",
              "anotacoesInternas": "",
              "pesoBruto": "0.000",
              "pesoLiquido": "0.000",
              "tipoProduto": "produto",
              "tags": [],
              "dtCad": "2017-05-24 17:32:18",
              "codCategoria": 0,
              "updatedAt": "2019-10-30 14:55:13"
            }

+ Response 410 (application/json)
 Quando o registro foi apagado do sistema.

    + Body

            {
              "errCode": 410,
              "errMsg": "Registro com código 1 não existe.",
              "errObs": null,
              "errFields": null
            }

+ Response 404 (application/json)
 Quando o registro não foi encontrado.

    + Body

            {
              "errCode": 404,
              "errMsg": "Nenhum registro com código 1 econtrado",
              "errObs": null,
              "errFields": null
            }

# Ajuste de estoque [/ajusteEstoque]

Permite definir o estoque atual dos produtos. 
Os ajustes de estoque não podem ser editados nem excluídos, caso seja necessário realize um novo ajuste.

| motivo | Descrição |
|------|------------|
| `10` | Ajuste geral. |
| `20` | Envio de RMA. |
| `30` | Retorno de RMA. |
| `40` | Devolução de venda. |
| `50` | Devolução de compra. |


### Listar (List) [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)

          {
              "total": 1,
              "per_page": 50,
              "current_page": 1,
              "last_page": 1,
              "next_page_url": null,
              "prev_page_url": null,
              "from": 1,
              "to": 50,
              "data": [
                {
                  "codigo": 1,
                  "codContato": 1,
                  "nomeContato": "Cliente padrão",
                  "motivo": 10,
                  "dtCad": "2019-05-15 10:56:58",
                  "obs": "Ajusta por quebra",
                  "tags": [
                      "api,teste"
                  ]
                }
              ]
          }

+ Response 401 (application/json)

          {
              "errCode": 401,
              "errMsg": "Não foi possível acessar o sistema. Verifique seu \"access_token\".",
              "errObs": "access_denied",
              "errFields": null,
              "errUrl": "/v1/ajusteEstoque"
          }
### Detalhar (Read) [GET /ajusteEstoque/{codigo}]

+ Parameters
    + codigo (required, number, `1`) ... Código do ajuste

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)
  Todos os dados do ajuste
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 58

    + Body

            {
              "codigo": 1,
              "codContato": 1,
              "nomeContato": "Cliente padrão",
              "motivo": 10,
              "dtCad": "2019-05-15 10:56:58",
              "obs": "",
              "tags": [
                  "api,teste"
              ],
              "produtos": [
                  {
                      "estoqueFinal": 300,
                      "quantidade": -402,
                      "codProduto": 1,
                      "nomeProduto": "Produto padrão 1",
                      "codProprio": ""
                  },
                  {
                      "estoqueFinal": 50,
                      "quantidade": -602,
                      "codProduto": 2,
                      "nomeProduto": "Produto padrão 2",
                      "codProprio": ""
                  }
              ]
            }

+ Response 404 (application/json)
  Quando registro não for encontrado.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59

    + Body

            {
              "errCode": 404,
              "errMsg": "Nenhum registro com código 1 econtrado",
              "errObs": null,
              "errFields": null
            }

+ Response 410 (application/json)
  Quando registro foi apagado do sistema, o código de retorno é 410.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59
    + Body

            {
              "errCode": 410,
              "errMsg": "Registro com código 1 não existe.",
              "errObs": null,
              "errFields": null
            }
