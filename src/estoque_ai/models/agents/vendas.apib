quasFORMAT: 1A
HOST: https://v4.egestor.com.br/api/v1/

URL homologação/produção (access_token): https://api.egestor.com.br/api/oauth/access_token

# eGestor API

O [eGestor](https://www.egestor.com.br) disponibiliza uma API RESTful que permite o acesso aos módulos do sistema.

Recursos disponíveis para acesso via API:
* [**Dados da empresa**](#reference/recursos/empresa)
* [**Contatos**](#reference/recursos/contatos)
* [**Categoria de produtos**](#reference/recursos/categorias)
* [**Produtos**](#reference/recursos/produtos)
* [**Ajuste de estoque**](#reference/recursos/ajuste-de-estoque)
* [**Serviços**](#reference/recursos/servicos)
* [**Disponíveis**](#reference/recursos/disponiveis)
* [**Formas de pagamento**](#reference/recursos/formas-de-pagamento)
* [**Plano de contas**](#reference/recursos/plano-de-contas)
* [**Grupo de tributos**](#reference/recursos/grupo-de-tributos)
* [**Recebimentos**](#reference/recursos/recebimentos)
* [**Pagamentos**](#reference/recursos/pagamentos)
* [**Compras**](#reference/recursos/compras)
* [**Vendas / Ordens de serviço / OS**](#reference/recursos/vendas-ordens-de-servico-os)
* [**Devolução de vendas**](#reference/recursos/devolucoes)
* [**Boletos**](#reference/recursos/boletos)
* [**Relatórios**](#reference/recursos/relatorios)
* [**NFSe**](#reference/recursos/nfse)
* [**NFe**](#reference/recursos/nfe)
* [**Disco virtual**](#reference/recursos/disco-virtual)
* [**Usuários**](#reference/recursos/usuarios)
* [**Webhooks**](#reference/recursos/webhooks)

## Métodos
Requisições para a API devem seguir os padrões:
| Método | Descrição |
|---|---|
| `GET` | Retorna informações de um ou mais registros. |

## Respostas

| Código | Descrição |
|---|---|
| `200` | Requisição executada com sucesso (success).|
| `400` | Erros de validação ou os campos informados não existem no sistema.|
| `401` | Dados de acesso inválidos.|
| `404` | Registro pesquisado não encontrado (Not found).|
| `405` | Método não implementado.|
| `410` | Registro pesquisado foi apagado do sistema e não esta mais disponível.|
| `422` | Dados informados estão fora do escopo definido para o campo.|
| `429` | Número máximo de requisições atingido. (*aguarde alguns segundos e tente novamente*)|


## Limites (Throttling)
Existe o limite de `60` requisições por minuto por aplicação+usuário.

Você pode acompanhar esses limites nos `headers`: `X-RateLimit-Limit`, `X-RateLimit-Remaining` enviados em todas as respostas da API.

Ações de `listar` exibem `50` registros por página. Não é possível alterar este número.

Por questões de segurança, todas as requisições serão feitas através do protocolo `HTTPS`.

## Listar
As ações de `listar` permitem o envio dos seguintes parâmetros:

| Parâmetro | Descrição |
|---|---|
| `filtro` | Filtra dados pelo valor informado. |
| `page` | Informa qual página deve ser retornada. |


# Group Autenticação - OAuth

Nossa API utiliza [OAuth2](https://oauth.net/2/) como forma de autenticação/autorização.


## Solicitando tokens de acesso [/oauth/access_token]

Para testar a API, crie uma conta no eGestor e entre no sistema utilizando as credenciais informadas.  
Para gerar o token da API (personal_token)

### Obtendo o personal_token

Para testar a API do eGestor (sandbox), sugerimos a criação de uma conta de testes.

Para obter o personal_token, siga as instruções do video a seguir: https://www.youtube.com/watch?v=2y648YPA9Us&authuser=1

### Utilizando personal_token [POST]
**Atenção! O endpoint de login não utiliza o parâmetro da versão da API (v1). Utilize a seguinte URL:**

> POST https://api.egestor.com.br/api/oauth/access_token

O `personal_token` é do formato JWT e contém informações da empresa (subdomínio) e do usuário. Este é o token utilizado em sistemas de e-Commerce e sites integrados ao eGestor.


#### Dados para envio no POST
| Parâmetro | Descrição |
|---|---|
| `grant_type` | Informar: `personal` |
| `personal_token` | Token JWT com informações da aplicação cliente. |


+ Request (application/json)

    + Body

            {
              "grant_type": "personal"
              "personal_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHAiOiIzNDhlNTM4MzQ2M2Y3MzZjMGExZTJhNTFmNjYwZjA5NCIsInN1YmRvbWluaW8iOiJleGVtcGxvIiwiY2xpZW50IjoiMTU0ZDZlZGQ4YmQzMDEwYzQ4NjBkN2E5Yzk1NzNmYmVmZTUyNGRlZiJ9.JJNs0bFtGOtwyJy_r-eefsvkd387M_x7zpucE1m4WIw",
            }

+ Response 200 (application/json)

    + Body

            {
                "access_token": "[access_token]",
                "token_type": "Bearer",
                "expires_in": 900,
                "refresh_token": "[refresh_token]"
            }



# Vendas / Ordens de serviço / OS [/vendas]

As vendas não podem ser editadas pela API, apenas alterada sua situação. Caso seja necessário, apague-a e crie uma nova.

No eGestor, vendas podem ser de produtos e serviços. Vendas de serviços são consideradas OS. 

Para as OS valem os mesmos endpoint das vendas. Lembrando que é possível gerar notas fiscais de serviços (NFSe)

|Situação|Descrição|
|--------|---------|
|10|Orçamento|
|50|Venda|

### Listar (List) [GET /vendas{?filtro,dtTipo,dtIni,dtFim,vendedor,tipo,formaPgto,contaDest,situOS,buscaObs,fiscal,listarCanceladas,fields,orderBy}]

+ Parameters
    + filtro (optional, string) - Busca a string informada nos campos: código da venda, palavras-chave e nome do cliente.
    + dtTipo (optional, string) - Define a data que será utilizada pelos filtros dtIni e dtFim. Valores possíveis: 
        * dtVenda(default) - Data da venda.
        * dtCad - Data de cadastro.
        * dtEntrega - Data de entrega
    + dtIni (optional, date) - Data inicial, no formato yyyy-mm-dd
    + dtFim (optional, date) - Data final, no formato yyyy-mm-dd
    + vendedor (optional, integer) - Código do vendedor
    + tipo (optional, integer) - Filtra por venda ou orçamento. Valores possíveis: 
        * 10 - Orçamento.
        * 50 - Venda.
    + formaPgto (optional, integer) - Filtra pela forma de pagamento dos financeiros da venda.
    + contaDest (optional, integer) - Filtra pela conta destino dos financeiros da venda.
    + situOS (optional, string) - Situação da venda.
    + buscaObs (optional, string) - Pesquisa nas observações da venda.
    + fiscal (optional, string) - Permite filtrar por vendas com ou sem nota fiscal. Valores possíveis:
        * comNFe
        * semNFe
    + listarCanceladas (optional, integer) - Define se as vendas canceladas também serão listadas.
        * 1 - Listar vendas normais e vendas canceladas
        * 2 - Listar somente vendas canceladas
    + fields (optional) - Permite definir quais os campos serão retornados pela api. Informe separado por vírgula. Valores possíveis:
        * codigo, codContato, nomeContato, codVendedor, dtVenda, dtEntrega, dtCad, valorTotal, valorFrete, valorFinanc, valorEntrada, numParcelas, codsNFe, clienteFinal, situacao, situacaoOS, tags
        * ex: &fields=nomeContato,valorTotal
        * Padrão: codigo, codContato, nomeContato, codVendedor, dtVenda, valorTotal, valorFinanc, codsNFe, situacao, tags, ativo
    + orderBy (optional) - Permite definir a ordenação da listagem. Informe o campo e a forma de ordenação (ascendente ou descendente) separados por vírgula. Só é possível definir uma ordenação por requisição. Valores possíveis:
        * codigocodigo, codContato, codVendedor, clienteFinal, dtVenda, dtEntrega, dtCad, dtDel, valorTotal, valorFinanc, valorEntrada, numParcelas, tags, situOS, situacao, nomeContato, nomeVendedor
        * ex: &orderBy=nomeVendedor,desc
        * ex: &orderBy=dtVenda,asc
    

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)

          {
              "total": 1,
              "per_page": 50,
              "current_page": 1,
              "last_page": 4,
              "next_page_url": null,
              "prev_page_url": null,
              "from": 1,
              "to": 50,
              "data": [
                {
                    "codigo": 4,
                    "codContato": 7,
                    "nomeContato": "Cliente",
                    "codVendedor": 1,
                    "dtVenda": "2017-04-01",
                    "valorTotal": 500,
                    "valorFinanc": 500,
                    "codsNFe": [],
                    "situacao": 50,
                    "clienteFinal": 1,
                    "tags": [],
                    "ativo": true
                }
              ]
          }

+ Response 401 (application/json)

          {
              "errCode": 401,
              "errMsg": "Não foi possível acessar o sistema. Verifique seu \"access_token\".",
              "errObs": "access_denied",
              "errFields": null,
              "errUrl": "/v1/vendas"
          }

### Detalhar (Read) [GET /vendas/{codigo}{?listarCanceladas}]

+ Parameters
    + codigo (required, number, `1`) ... Código da venda
    + listarCanceladas (optional, boolean) - Caso definido como true, detalha uma venda mesmo que ela esteja cancelada
    

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)
  Todos os dados do contato
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 58

    + Body

            {
              "codigo": 1,
              "codContato": 1,
              "nomeContato": "Marcelo",
              "codVendedor": 2,
              "nomeVendedor": "João",
              "dtVenda": "2017-07-11",
              "dtEntrega": "2017-07-12",
              "dtCad": "2017-06-11 14:15:20",
              "valorTotal": 500,
              "valorFinanc": 500,
              "valorFrete": 15.45,
              "valorEntrada": 0,
              "numParcelas": 0,
              "codsNFe": [],
              "customizado": {
                "xCampo1": "Venda direta."
              },
              "clienteFinal": true,
              "situacao": 50,
              "situacaoOS": "Em espera",
              "tags": [],
              "publicURL": "https://v4.egestor.com.br/vendas/print.php?key=10540.626.3588.2457.d1432",
              "produtos": [
                {
                    "codigo": 26,
                    "codProduto": 17,
                    "tipo": "produto",
                    "preco": 0,
                    "custo": 110,
                    "custoCadProd": 110,
                    "quant": 1,
                    "vDesc": 0,
                    "valorIPI": 0,
                    "valorST": 0,
                    "valorFCPST": 0,
                    "obs": "",
                    "descricao": "Caneca preta",
                    "codigoProprio": "204"
                },
                {
                    "codigo": 267,
                    "codProduto": 17,
                    "tipo": "produto",
                    "preco": 500,
                    "custo": 110,
                    "custoCadProd": 110,
                    "quant": 1,
                    "vDesc": 0,
                    "valorIPI": 5,
                    "valorST": 0,
                    "valorFCPST": 0,
                    "obs": "",
                    "descricao": "Caneca preta",
                    "codigoProprio": "204"
                }
              ],
              "financeiros": [
                {
                    "codigo": 337,
                    "codBoleto": 0,
                    "codFormaPgto": 0,
                    "codPlanoContas": 1,
                    "descricao": "Cobrança da venda de produtos, parcela 1/1",
                    "codCaixa": 1,
                    "codRecibo": 0,
                    "situacao": 20,
                    "dtComp": "2017-07-11",
                    "tags": [],
                    "dtVenc": "2017-07-11",
                    "valor": 505,
                    "nomeFormaPgto": "Boleto"
                }
              ]
            }

+ Response 404 (application/json)
  Quando o registro não foi encontrado.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59

    + Body

            {
              "errCode": 404,
              "errMsg": "Nenhum registro com código 1 encontrado",
              "errObs": null,
              "errFields": null
            }

+ Response 410 (application/json)
  Quando o registro foi apagado do sistema.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59
    + Body

            {
              "errCode": 410,
              "errMsg": "Registro com código 1 não existe.",
              "errObs": null,
              "errFields": null
            }

### Detalhar XML NFE (Read) [GET /vendas/{codigo}/nfe]

+ Parameters
    + codigo (required, number, `1`) ... Código da venda

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)
Todos os XMLs associados a venda, e suas respectivas situações.
| Situação | Descrição |
|------|--------|
| `5` | Criada |
| `10` | Em digitação |
| `15` | Rejeitada |
| `20` | Assinada |
| `30` | Validada |
| `35` | Form. Segur. |
| `40` | Enviada |
| `50` | Autorizada |
| `80` | Denegada |
| `90` | Cancelada |
| `91` | Inutilizada |  
**Código:** Identificador interno do sistema, utilizado para detalhar a nota em outros endpoints  
**ID:** É o número da nota fiscal dentro do sistema.

    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 58

    + Body

        [
            {
                "codigo": "110",
                "id": "100",
                "situacao": "5",
                "nota": "<NFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"><infNFe><ide><cUF>43</cUF><natOp>...</NFe>"
            }
            ,
            {
                "codigo": "113",
                "id": "101",
                "situacao": "50",
                "nota": "<NFe xmlns=\"http://www.portalfiscal.inf.br/nfe\"><infNFe><ide><cUF>43</cUF><natOp>...</NFe>"
            }

        ]
### Detalhar contato da venda [GET  /vendas/{codigo}/contato]

+ Parameters
    + codigo (required, number, `1`) ... Código da venda

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)

    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59

    + Body

            {
              "codigo": 324,
              "nome": "Kaya Labadie",
              "fantasia": "",
              "nomeParaContato": "Elfrieda Labadie",
              "cpfcnpj": "83294489654",
              "tipo": [
                "cliente"
              ],
              "dtNasc": "1992-02-13",
              "emails": [
                "exemplo@example.com.br"
              ],
              "fones": [],
              "cep": 4320040,
              "logradouro": "Rua Exemplo lado ímpar",
              "numero": "999",
              "complemento": "",
              "bairro": "",
              "codIBGE": "355030",
              "uf": "SP",
              "pais": "",
              "clienteFinal": true,
              "indicadorIE": 1,
              "inscricaoMunicipal": "",
              "inscricaoEstadual": "",
              "inscricaoEstadualST": "",
              "suframa": "",
              "obs": "",
              "tags": []
            }

# Devolução de vendas [/devolucoes]

Permite realizar a devolução de itens que foram vendidos


### Listar (List) [GET /devolucoes{?fields,orderBy}]

+ Parameters
    + fields (optional) - Permite definir quais os campos serão retornados pela api. Informe separado por vírgula.
      * ex: &fields=codigo,obs
    + orderBy (optional) - Permite definir a ordenação da listagem. Informe o campo e a forma de ordenação (ascendente ou descendente) separados por vírgula. Só é possível definir uma ordenação por requisição. Valores possíveis:
        * codigo, codVenda, codContato, dtCad
        * ex: &orderBy=dtCad,desc
        * ex: &orderBy=codVenda,asc

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)

          {
              "total": 1,
              "per_page": 50,
              "current_page": 1,
              "last_page": 4,
              "next_page_url": null,
              "prev_page_url": null,
              "from": 1,
              "to": 50,
              "data": [
                {
                    "codigo": 1,
                    "tags": [
                        "tag1",
                        "tag2"
                    ],
                    "obs": "Motivo da devolução",
                    "dtCad": "2022-05-26 10:31:20",
                    "codContato": "165"
                }
              ]
          }

+ Response 401 (application/json)

          {
              "errCode": 401,
              "errMsg": "Não foi possível acessar o sistema. Verifique seu \"access_token\".",
              "errObs": "access_denied",
              "errFields": null,
              "errUrl": "/v1/devolucoes"
          }

### Detalhar (Read) [GET /devolucoes/{codigo}]

+ Parameters
    + codigo (required, number, `1`) ... Código do devoluco

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)
  Todos os dados do devoluco
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 58

    + Body

            {
                "codigo": 1,
                "codVenda": 1,
                "tags": [
                    "tag1",
                    "tag2"
                ],
                "obs": "Produto com defeito",
                "dtCad": "2022-12-09 17:26:08",
                "codContato": 1,
                "dtVenda": "2022-12-09",
                "situOS": "",
                "nomeContato": "Contato Teste",
                "produtos": [
                    {
                        "codigo": 1,
                        "quantDevolvida": 3,
                        "valorDevolvido": 14.97,
                        "descricao": "Nome do produto",
                        "codigoProprio": "789123445566"
                    }
                ]
            }

+ Response 404 (application/json)
  Quando registro não for encontrado.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59

    + Body

            {
              "errCode": 404,
              "errMsg": "Nenhum registro com código 1 econtrado",
              "errObs": null,
              "errFields": null
            }

# Boletos [/boletos]

Boletos não podem ser **editados** ou **excluídos** via API.

| Situação | Descrição |
|------|------------|
| `10` | Em aberto. |
| `50` | Recebido. |

### Listar (List) [GET /boletos{?filtro,dtTipo,dtIni,dtFim,codigosFin,situacaoBoleto,situacaoRemessa,situacaoFin,formaPgto,mostrarInativos,fields,orderBy}]
+ Parameters
    + filtro (optional, string) - Busca a string informada nos campos: código do boleto, nome do cliente ou descrição do financeiro.
    + dtTipo (optional, string) - Define a data que será utilizada pelos filtros dtIni e dtFim. Valores possíveis: 
        * dtVenc (default) - Data de vencimento.
        * dtEmissao - Data da emissão.
    + dtIni (optional, date) - Data inicial, no formato yyyy-mm-dd
    + dtFim (optional, date) - Data final, no formato yyyy-mm-dd
    + codigosFin (optional, string) - Lista de códigos dos financeiros, separados por virgula (ex.: 1,2,3)
    + situacaoBoleto (optional, integer) - Filtra pela situação atual do boleto. Valores possíveis:
        * 10 - Em aberto
        * 50 - Recebido
        * 70 - Boleto de teste
    + situacaoRemessa (optional, integer) - Filtra pela situação atual da remessa do boleto. Valores possíveis:
        * 5 - Pendência
        * 10 - Sem registro
        * 17 - Aguarda Retorno
        * 20 - Registrado
        * 50 - Pago
        * 105 - Pago (Pendência)
        * 110 - Pago (Sem registro)
        * 117 - Pago (Aguarda Retorno)
    + situacaoFin (optional, integer) - Filtra pela situação do financeiro vinculado ao boleto. Valores possíveis:
        * 20 - Financeiro a receber
        * 40 - Financeiro recebido
        * 80 - Financeiros em diferentes situações (quando boleto composto por mais de um financeiro)
        * 90 - Financeiro cancelado
    + formaPgto (optional, integer) - Filtra pela forma de pagamento do financeiro vinculado ao boleto.
    + mostrarInativos (optional, boolean) - Define se os boletos cancelados também serão listados.
    + fields (optional) - Permite definir quais os campos serão retornados pela api. Informe separado por vírgula.
        * ex: &fields=contatoNome,dtEmissao
    + orderBy (optional) - Permite definir a ordenação da listagem. Informe o campo e a forma de ordenação (ascendente ou descendente) separados por vírgula. Só é possível definir uma ordenação por requisição. Valores possíveis:
        * codigo, codRemessa, codContato, contatoNome, dtEmissao, dtVenc, dtPgto, dtCancelado, valorPago, situacao, sitRemessa
        * ex: &orderBy=contatoNome,desc
        * ex: &orderBy=dtEmissao,asc

+ Request (application/json)

  + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)

            {
                "total": 1,
                "per_page": 50,
                "current_page": 1,
                "last_page": 1,
                "next_page_url": null,
                "prev_page_url": null,
                "from": 1,
                "to": 50,
                "data": [
                  {
                      "codigo": 1,
                      "contatoNome": "",
                      "dtVenc": "2017-06-01",
                      "dtEmissao": "2017-06-07",
                      "valor": 100,
                      "valorPago": 0,
                      "codRecebimentos": [
                          "4"
                      ],
                      "situacao": "10"
                  }
                ]
            }

### Detalhar (Read) [GET /boletos/{codigo}{?mostrarInativos}]
  + Parameters
      + codigo (required, number, `1`) ... Código do boleto
      + mostrarInativos (optional, boolean) - Caso definido como true, detalha um boleto mesmo que ele esteja cancelado

+ Request (application/json)

  + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)
Quando o boleto está em aberto (ainda não pago).
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 58

    + Body

            {
              "codigo": 10,
              "codContato": 1,
              "contatoNome": "Hugo",
              "contatoEmail": "hugo@example.com",
              "dtVenc": "2016-04-14",
              "dtEmissao": "2016-03-28",
              "valor": 201,
              "valorPago": 0,
              "codRecebimentos": [
                "14", "15", "16"
              ],
              "link": "http://link_para_arquivo_pdf",
              "situacao": "10"
            }
            
+ Response 200 (application/json)
Quando o boleto já estiver pago.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 58

    + Body

            {
              "codigo": 10,
              "codContato": 1,
              "contatoNome": "Hugo",
              "contatoEmail": "hugo@example.com",
              "dtVenc": "2016-04-14",
              "dtEmissao": "2016-03-28",
              "dtCredito": "2016-04-16",
              "valor": 201.00,
              "valorPago": 201.00,
              "codRecebimentos": [
                "14", "15", "16"
              ],
              "link": "http://link_para_arquivo_pdf",
              "situacao": "50"
            }

+ Response 410 (application/json)
 Quando o registro foi apagado do sistema.

    + Body

            {
              "errCode": 410,
              "errMsg": "Registro com código 10 não existe.",
              "errObs": null,
              "errFields": null
            }

+ Response 404 (application/json)
 Quando o registro não foi encontrado.

    + Body

            {
              "errCode": 404,
              "errMsg": "Nenhum registro com código 10 econtrado",
              "errObs": null,
              "errFields": null
            }
            
# Boleto eGestor - Verificar retorno  [/verificarRetornoBoletos]

### Verificar Retorno (Read) [GET /verificarRetornoBoletos]
Atualiza os recebimentos associados ao Boleto eGestor.

+ Request (application/json)

  + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)

    + Body

            {
              "ok": 1
            }

# NFSe [/nfse]
Para utilizar o módulo de emissão de notas fiscal de serviço (NFSe) é preciso primeiro realizar a ativação do mesmo em conjuto com o suporte eGestor, e configurar os parâmetros básicos. Entre em contato com o suporte para mais informações.
Notas fiscais de serviço (NFSe) não podem ser excluídas nem canceladas via API.

| Situação | Descrição |
|----------|-----------|
| `10` | Autorizada |
| `20` | Ag. retorno |
| `25` | Ag. cancelamento |
| `30` | Rejeitada |
| `40` | Denegada |
| `90` | Cancelada |
| `99` | Não enviada |


| Enviar para prefeitura (enviarPrefeitura) | Descrição |
|-------------------------------------------|-----------|
| `0` | Não |
| `1` | Sim |

| Município de incidência do imposto (munIncidencia) | Descrição |
|----------------------------------------------------|-----------|
| `1` | Meu município |
| `2` | Município do cliente |

| Local da prestação do serviço (localPrest) | Descrição |
|--------------------------------------------|-----------|
| `1` | No município |
| `3` | Fora do município |
| `6` | Outro (Exterior) |

### Listar (List) [GET /nfse{?filtro,buscaObs,dtTipo,dtIni,dtFim,origNota,situacao,fields}]

+ Parameters
    + filtro (optional, string) - Busca a string informada nos campos: código da nota, código da venda, palavras-chave e nome do cliente.
    + buscaObs (optional, string) - Busca a string informada nas observações da nota fiscal
    + dtTipo (optional, string) - Define a data que será utilizada pelos filtros dtIni e dtFim. Valores possíveis: 
        * dtEmissao(default) - Data da emissão da nota fiscal.
        * dtCad - Data de cadastro.
    + dtIni (optional, date) - Data inicial, no formato yyyy-mm-dd
    + dtFim (optional, date) - Data final, no formato yyyy-mm-dd
    + origNota (optional, string) - Origem da nota fiscal. Valores possíveis: 
        * 'venda'
        * 'avulsa'
    + situacao (optional, integer) - Situação atual da nota fiscal. Valores possíveis:
        * 10 - Autorizada
        * 20 - Ag. retorno
        * 25 - Ag. cancelamento
        * 30 - Rejeitada
        * 40 - Denegada
        * 90 - Cancelada
        * 99 - Não enviada
    + fields (optional, string) - Permite definir quais os campos serão retornados pela api. Informe separado por vírgula. 
        * ex: &fields=codigo,dtEmissao,valorBruto

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)

          {
              "total": 1,
              "per_page": 50,
              "current_page": 1,
              "last_page": 4,
              "next_page_url": null,
              "prev_page_url": null,
              "from": 1,
              "to": 50,
              "data": [
                {
                    "codigo": 171,
                    "codContato": 152,
                    "nomeContato": "Cliente padrão",
                    "codVenda": 339,
                    "numeroRPS": 160034,
                    "numeroNFSe": 10,
                    "chaveRPS": "",
                    "serie": "7",
                    "ambiente": 2,
                    "dtEmissao": "2018-11-30 17:16:30",
                    "dtCad": "2018-11-30 09:56:26",
                    "valorBruto": 90,
                    "valorLiquido": 90,
                    "obs": "",
                    "situacao": 10,
                    "situRetorno": "30/11/2018 17:16:30 - Mensagem retornada pela prefeitura: Código: L018, Mensagem: A empresa nao esta habilitada no ambiente de integracao.  Numero do RPS em que ocorreu o erro: 160034",
                    "tags": ""
                }
              ]
          }

+ Response 401 (application/json)

          {
              "errCode": 401,
              "errMsg": "Não foi possível acessar o sistema. Verifique seu \"access_token\".",
              "errObs": "access_denied",
              "errFields": null,
              "errUrl": "/v1/nfse"
          }

### Detalhar (Read) [GET /nfse/{codigo}]

+ Parameters
    + codigo (required, number, `1`) ... Código da NFSe

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 58

    + Body

            {
              "codigo": 1,
              "codContato": 1,
              "codVenda": 1,
              "numeroRPS": 1,
              "numeroNFSe": 1,
              "chaveRPS": "",
              "serie": "20",
              "ambiente": 2,
              "dtEmissao": "2018-12-11 17:55:41",
              "dtCad": "2018-12-11 17:55:38",
              "valorBruto": 90.9,
              "valorLiquido": 90.9,
              "obs": "",
              "situacao": 10,
              "situRetorno": "11/12/2018 17:55:41 - Mensagem retornada pela prefeitura: Código: E100, Mensagem: Documento autorizado.",
              "ativo": true,
              "nfseItens": [
                  {
                      "codigo": "1",
                      "codNfse": "1",
                      "codProduto": "24",
                      "codListaServico": "01.06",
                      "servico": "Formatação de computadores 775",
                      "codConfigTrib": "8",
                      "quant": "1",
                      "unitario": "90.9000000000",
                      "vDesc": "0.0000",
                      "total": "90.9000000000",
                      "configTrib": {
                          "iss": {
                              "aliquota": "2",
                              "baseCalculo": 90.9,
                              "imposto": 1.82,
                              "retido": 0
                          },
                          "inss": {
                              "aliquota": 0,
                              "baseCalculo": 90.9,
                              "imposto": 0,
                              "retido": 0
                          },
                          "pis": {
                              "aliquota": 0,
                              "baseCalculo": 90.9,
                              "imposto": 0,
                              "retido": 0
                          },
                          "cofins": {
                              "aliquota": 0,
                              "baseCalculo": 90.9,
                              "imposto": 0,
                              "retido": 0
                          },
                          "csll": {
                              "aliquota": 0,
                              "baseCalculo": 90.9,
                              "imposto": 0,
                              "retido": 0
                          },
                          "irrf": {
                              "aliquota": 0,
                              "baseCalculo": 90.9,
                              "imposto": 0,
                              "retido": 0
                          }
                      },
                      "configGeral": {},
                      "obs": "servico",
                      "descConfigTrib": "ISS",
                      "cnae": "5920100",
                      "camposExtras": {},
                      "codTributacaoMun": "724",
                      "vDeducao": 0.00
                  }
              ],
              "munIncidencia": 1,
              "localPrest": 1,
              "tags": []
            }

+ Response 404 (application/json)
  Quando o registro não foi encontrado.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59

    + Body

            {
              "errCode": 404,
              "errMsg": "Nenhum nfse encontrado para o código 1",
              "errObs": null,
              "errFields": null
            }

+ Response 410 (application/json)
  Quando o registro foi apagado do sistema.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59
    + Body

            {
              "errCode": 410,
              "errMsg": "Registro com código 1 não existe.",
              "errObs": null,
              "errFields": null
            }
            
# NFe [/nfe]
Módulo para a consultar a situação de NFe e NFCe, e realizar o download do XML de documentos autorizados.

| Situação | Descrição |
|------|--------|
| `5` | Criada |
| `10` | Em digitação |
| `15` | Rejeitada |
| `20` | Assinada |
| `30` | Validada |
| `35` | Form. Segur. |
| `40` | Enviada |
| `50` | Autorizada |
| `80` | Denegada |
| `90` | Cancelada |
| `91` | Inutilizada |

| Ambiente | Descrição |
|---------|-----------|
| `1` | Produção |
| `2` | Homologação |

### Listar (List) [GET /nfe{?dtIni,dtFim,fields,orderBy}]
+ Parameters
    + dtIni (date, required) - Data inicial, no formato yyyy-mm-dd
    + dtFim (date, required) - Data final, no formato yyyy-mm-dd
    + fields (string, optional) - Permite definir quais os campos serão retornados pela api. Informe separado por vírgula. Valores possíveis:
        * codigo, numero, codVenda, cliente, chave, email, ambiente, serie, modelo, dtEmissao, cfop, valor, situacao
        * ex: &fields=codigo,cliente
        * Padrão: codigo
    + orderBy (string, optional) - Permite definir a ordenação da listagem. Informe o campo e a forma de ordenação (ascendente ou descendente) separados por vírgula. Só é possível definir uma ordenação por requisição. Valores possíveis:
        * codigo, numero, codVenda, cliente, chave, email, ambiente, serie, modelo, dtEmissao, cfop, valor, situacao
        * ex: &orderBy=cliente,desc
        * ex: &orderBy=email,asc
        

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)

          {
              "total": 1,
              "per_page": 50,
              "current_page": 1,
              "last_page": 4,
              "next_page_url": null,
              "prev_page_url": null,
              "from": 1,
              "to": 50,
              "data": [
                 {
                   "codigo": 282,
                   "dtEmissao": "2021-01-08",
                   "situacao": 50,
                   "valor": 10.45
                 }
              ]
          }

+ Response 401 (application/json)

          {
              "errCode": 401,
              "errMsg": "Não foi possível acessar o sistema. Verifique seu \"access_token\".",
              "errObs": "access_denied",
              "errFields": null,
              "errUrl": "/v1/nfe"
          }
### Detalhar (Read) [GET /nfe/{codigo}]

+ Parameters
    + codigo (required, number, `1`) ... Código da NFe

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 58

    + Body

            {
              "codigo": "1",
              "numero": "1",
              "chave": "43123456789123456789123456789123456789123456",
              "modelo": "65",
              "dt_emissao": "2019-12-19",
              "situacao": "50"
            }

+ Response 404 (application/json)
  Quando o registro não foi encontrado.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59

    + Body

            {
              "errCode": 404,
              "errMsg": "Nenhum nfe encontrado para o código 1",
              "errObs": null,
              "errFields": null
            }
