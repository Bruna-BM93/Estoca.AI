quasFORMAT: 1A
HOST: https://v4.egestor.com.br/api/v1/

URL homologação/produção (access_token): https://api.egestor.com.br/api/oauth/access_token

# eGestor API

O [eGestor](https://www.egestor.com.br) disponibiliza uma API RESTful que permite o acesso aos módulos do sistema.

Recursos disponíveis para acesso via API:
* [**Dados da empresa**](#reference/recursos/empresa)
* [**Contatos**](#reference/recursos/contatos)
* [**Categoria de produtos**](#reference/recursos/categorias)
* [**Produtos**](#reference/recursos/produtos)
* [**Ajuste de estoque**](#reference/recursos/ajuste-de-estoque)
* [**Serviços**](#reference/recursos/servicos)
* [**Disponíveis**](#reference/recursos/disponiveis)
* [**Formas de pagamento**](#reference/recursos/formas-de-pagamento)
* [**Plano de contas**](#reference/recursos/plano-de-contas)
* [**Grupo de tributos**](#reference/recursos/grupo-de-tributos)
* [**Recebimentos**](#reference/recursos/recebimentos)
* [**Pagamentos**](#reference/recursos/pagamentos)
* [**Compras**](#reference/recursos/compras)
* [**Vendas / Ordens de serviço / OS**](#reference/recursos/vendas-ordens-de-servico-os)
* [**Devolução de vendas**](#reference/recursos/devolucoes)
* [**Boletos**](#reference/recursos/boletos)
* [**Relatórios**](#reference/recursos/relatorios)
* [**NFSe**](#reference/recursos/nfse)
* [**NFe**](#reference/recursos/nfe)
* [**Disco virtual**](#reference/recursos/disco-virtual)
* [**Usuários**](#reference/recursos/usuarios)
* [**Webhooks**](#reference/recursos/webhooks)

## Métodos
Requisições para a API devem seguir os padrões:
| Método | Descrição |
|---|---|
| `GET` | Retorna informações de um ou mais registros. |

## Respostas

| Código | Descrição |
|---|---|
| `200` | Requisição executada com sucesso (success).|
| `400` | Erros de validação ou os campos informados não existem no sistema.|
| `401` | Dados de acesso inválidos.|
| `404` | Registro pesquisado não encontrado (Not found).|
| `405` | Método não implementado.|
| `410` | Registro pesquisado foi apagado do sistema e não esta mais disponível.|
| `422` | Dados informados estão fora do escopo definido para o campo.|
| `429` | Número máximo de requisições atingido. (*aguarde alguns segundos e tente novamente*)|


## Limites (Throttling)
Existe o limite de `60` requisições por minuto por aplicação+usuário.

Você pode acompanhar esses limites nos `headers`: `X-RateLimit-Limit`, `X-RateLimit-Remaining` enviados em todas as respostas da API.

Ações de `listar` exibem `50` registros por página. Não é possível alterar este número.

Por questões de segurança, todas as requisições serão feitas através do protocolo `HTTPS`.

## Listar
As ações de `listar` permitem o envio dos seguintes parâmetros:

| Parâmetro | Descrição |
|---|---|
| `filtro` | Filtra dados pelo valor informado. |
| `page` | Informa qual página deve ser retornada. |


# Group Autenticação - OAuth

Nossa API utiliza [OAuth2](https://oauth.net/2/) como forma de autenticação/autorização.


## Solicitando tokens de acesso [/oauth/access_token]

Para testar a API, crie uma conta no eGestor e entre no sistema utilizando as credenciais informadas.  
Para gerar o token da API (personal_token)

### Obtendo o personal_token

Para testar a API do eGestor (sandbox), sugerimos a criação de uma conta de testes.

Para obter o personal_token, siga as instruções do video a seguir: https://www.youtube.com/watch?v=2y648YPA9Us&authuser=1

### Utilizando personal_token [POST]
**Atenção! O endpoint de login não utiliza o parâmetro da versão da API (v1). Utilize a seguinte URL:**

> POST https://api.egestor.com.br/api/oauth/access_token

O `personal_token` é do formato JWT e contém informações da empresa (subdomínio) e do usuário. Este é o token utilizado em sistemas de e-Commerce e sites integrados ao eGestor.


#### Dados para envio no POST
| Parâmetro | Descrição |
|---|---|
| `grant_type` | Informar: `personal` |
| `personal_token` | Token JWT com informações da aplicação cliente. |


+ Request (application/json)

    + Body

            {
              "grant_type": "personal"
              "personal_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHAiOiIzNDhlNTM4MzQ2M2Y3MzZjMGExZTJhNTFmNjYwZjA5NCIsInN1YmRvbWluaW8iOiJleGVtcGxvIiwiY2xpZW50IjoiMTU0ZDZlZGQ4YmQzMDEwYzQ4NjBkN2E5Yzk1NzNmYmVmZTUyNGRlZiJ9.JJNs0bFtGOtwyJy_r-eefsvkd387M_x7zpucE1m4WIw",
            }

+ Response 200 (application/json)

    + Body

            {
                "access_token": "[access_token]",
                "token_type": "Bearer",
                "expires_in": 900,
                "refresh_token": "[refresh_token]"
            }



# Group Recursos

# Dados da empresa [/empresa]

Buscar detalhes da conta.

### Listar (List) [GET /empresa]

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]


+ Response 200 (application/json)

          {
    "subdom": "zipline",
    "nome": "ZIPLINE TECNOLOGIA LTDA",
    "fantasia": "",
    "cpfcnpj": "04693497000121",
    "fones": "5530263336",
    "emails": "suporte@zipline.com.br",
    "end": "Rua do Acampamento",
    "num": "380",
    "compl": "SALA  1 - 2 E 3",
    "bairro": "Centro",
    "cidadeNome": "Santa Maria",
    "cidadeCod": "4316907",
    "uf": "RS",
    "cep": "97050002",
    "cifrao": "",
    "crt": 10,
    "atividade": 10,
    "pSimples": 4,
    "pICMS": "",
    "pPIS": "",
    "pCOFINS": "",
    "baseIRPJ": "",
    "baseCSLL": "",
    "pIRPJ": "",
    "pCSLL": "",
    "inscMunicipal": "4628202",
    "tipoIE": "",
    "inscEstadual": "",
    "cnae": "6203100",
    "codTributMunicipio": "724",
    "regimeTributacao": "0",
    "cmc": "",
    "RNTRC": ""
}



# Contatos [/contatos]

Os contatos podem ser clientes, fornecedores e transportadores.

### Listar (List) [GET /contatos{?filtro,endereco,telefone,email,clienteFinal,indIE,IE,IM,suframa,obs,fields,orderBy}]
+ Parameters
    + filtro (string, optional) - Busca a string informada nos campos: nome, fantasia, código, contato, email, telefone e tags.
    + endereco (string, optional) - Busca a string informada no endereço do contato (rua, cep, bairro, cidade e estado)
    + telefone (string, optional) - Busca o valor informado no campo "Telefones" do contato
    + email (string, optional) - Busca o valor informado no campo "E-mails" do contato
    + clienteFinal (number, optional) - Filtrar por cliente final. Valores possíveis:
        * 1 - Sim
        * 2 - Não
    + indIE (number, optional) - Filtrar por indicador de IE. Valores possíveis:
        * 1 - Contribuinte
        * 2 - Isento de IE
        * 9 - Não contribuinte
    + IE (string, optional) - Filtra por inscrição estadual 
    + IM (string, optional) - Filtra por inscrição municipal
    + suframa (string, optional) - Filtra pelo código SUFRAMA 
    + obs (string, optional) - Busca a string informada nas observações do contato
    + fields (string, optional) - Permite definir quais os campos serão retornados pela api. Informe separado por vírgula. Valores possíveis:
        * codigo, nome, fantasia, nomeParaContato, cpfcnpj, tipo, dtNasc, dtCad, emails, fones, logradouro, numero, complemento, bairro, cep, cidade, uf, clienteFinal, indicadorIE, inscricaoMunicipal, inscricaoEstadual, obs, tags
        * ex: &fields=nome,fantasia
        * Padrão: codigo, nome, tipo, emails, fones, cidade, uf, clienteFinal, tags
    + orderBy (string, optional) - Permite definir a ordenação da listagem. Informe o campo e a forma de ordenação (ascendente ou descendente) separados por vírgula. Só é possível definir uma ordenação por requisição. Valores possíveis:
        * codigo, tipo, nome, fantasia, nomeParaContato, cpfcnpj, clienteFinal, indicadorIE, inscricaoEstadual, inscricaoMunicipal, suframa, emails, cidade
        * ex: &orderBy=nome,desc
        * ex: &orderBy=fantasia,asc
        

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)

          {
              "total": 1,
              "per_page": 50,
              "current_page": 1,
              "last_page": 4,
              "next_page_url": null,
              "prev_page_url": null,
              "from": 1,
              "to": 50,
              "data": [
                {
                  "codigo": "1",
                  "tipo": ["cliente", "fornecedor"],
                  "nome": "Nome do contato",
                  "emails": [],
                  "fones": [],
                  "clienteFinal": false,
                  "tags": [],
                  "cidade": "Nome da cidade",
                  "uf": "UF"
                }
              ]
          }

+ Response 401 (application/json)

          {
              "errCode": 401,
              "errMsg": "Não foi possível acessar o sistema. Verifique seu \"access_token\".",
              "errObs": "access_denied",
              "errFields": null,
              "errUrl": "/v1/contatos"
          }

### Detalhar (Read) [GET /contatos/{codigo}]

+ Parameters
    + codigo (required, number, `1`) ... Código do contato

+ Request (application/json)

    + Headers

            Authorization: Bearer [access_token]

+ Response 200 (application/json)
  Todos os dados do contato
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 58

    + Body

            {
              "codigo": "1",
              "tipo": ["cliente", "fornecedor", "transportadora"],
              "nome": "Nome do novo contato",
              "fantasia": "",
              "nomeParaContato": "",
              "cpfcnpj": "",
              "clienteFinal": true,
              "indicadorIE": 9,
              "inscricaoEstadual": "",
              "inscricaoEstadualST": "",
              "inscricaoMunicipal": "",
              "suframa": "",
              "emails": [],
              "logradouro": "",
              "numero": "",
              "complemento": "",
              "bairro": "",
              "cidade": "",
              "codIBGE": "",
              "uf": "",
              "cep": "",
              "pais": "",
              "fones": [],
              "tags": [],
              "obs": "",
              "dtNasc": "1990-05-12",
              "dtCad": "2017-01-15 11:20:15",
              "cpfCnpjEntrega": "",
              "logradouroEntrega": "",
              "numeroEntrega": "",
              "complementoEntrega": "",
              "bairroEntrega": "",
              "codIBGEEntrega": "0",
              "ufEntrega": "",
              "cepEntrega": 0,
              "pontoRefEntrega": "",
              "inscEstadualEntrega": "01234567",
              "fonesEntrega": "11999999999,11988888888",
              "emailsEntrega": "primeiro@teste.com,segundo@teste.com"
            }

+ Response 404 (application/json)
  Quando registro não for encontrado.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59

    + Body

            {
              "errCode": 404,
              "errMsg": "Nenhum registro com código 1 econtrado",
              "errObs": null,
              "errFields": null
            }

+ Response 410 (application/json)
  Quando registro foi apagado do sistema, o código de retorno é 410.
    + Headers

            X-RateLimit-Limit: 60
            X-RateLimit-Remaining: 59
    + Body

            {
              "errCode": 410,
              "errMsg": "Registro com código 1 não existe.",
              "errObs": null,
              "errFields": null
            }